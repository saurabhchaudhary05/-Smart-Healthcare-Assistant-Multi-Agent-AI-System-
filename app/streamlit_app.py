# import sys
# import os
# sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# import streamlit as st
# from orchestrator import OrchestratorAgent

# st.set_page_config(page_title="Smart Healthcare Assistant")
# st.title("🩺 Smart Healthcare Assistant")

# user_input = st.text_area("Describe your symptoms (separate by commas):", "")

# if st.button("Analyze Symptoms"):
#     if user_input.strip() == "":
#         st.warning("Please enter your symptoms first.")
#     else:
#         orchestrator = OrchestratorAgent()
#         result = orchestrator.process_user_input(user_input)
        
#         st.subheader("✅ Symptom Analysis Result:")
#         for item in result['symptom_analysis']['triage']:
#             st.write(f"- **Symptom**: {item['symptom'].capitalize()} → **Advice**: {item['advice']}")
        
#         st.subheader("📚 Medical Knowledge:")
#         for item in result['medical_knowledge']['knowledge']:
#             st.write(f"- **{item['symptom'].capitalize()} Info**: {item['info']}")
        
#         st.subheader("🌱 Lifestyle Advice:")
#         for item in result['lifestyle_advice']['lifestyle_advice']:
#             st.write(f"- **Symptom**: {item['symptom'].capitalize()} → {item['advice']}")
        
#         st.subheader("⏰ Reminders Set:")
#         for rem in result['reminders']:
#             st.write(f"- {rem['reminder']}")


import streamlit as st
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from orchestrator import OrchestratorAgent

orchestrator = OrchestratorAgent()

st.title("🩺 Smart Healthcare Assistant")

user_input = st.text_area("Describe your symptoms (separate by commas):", "fever, headache, cough")

if st.button("Analyze"):
    symptoms = [s.strip() for s in user_input.split(",") if s.strip()]

    if not symptoms:
        st.warning("Please enter at least one symptom.")
    else:
        with st.spinner("Processing your input..."):
            result = orchestrator.process(symptoms)

        st.header("✅ Symptom Analysis Result:")
        for item in result["triage"]:
            st.write(f"Symptom: **{item['symptom']}** → Triage Level: **{item['triage_level']}**")

        st.header("📚 Medical Knowledge (Generated by OpenAI GPT-3.5):")
        for item in result["knowledge"]["knowledge"]:
            st.write(f"**{item['symptom']}**: {item['info']}")

        st.header("🌱 Lifestyle Advice (Generated by OpenAI GPT-3.5):")
        for item in result["lifestyle"]["lifestyle_advice"]:
            st.write(f"**{item['symptom']}**: {item['advice']}")

        st.header("⏰ Reminders Set:")
        for reminder in result["reminders"]["reminders"]:
            st.write(f"**{reminder['symptom']}**: {reminder['advice']} (Reminder Time: {reminder['reminder_time']})")
        st.success("Analysis complete!")
